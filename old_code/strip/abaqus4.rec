# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-0.02, 0.5), 
    point2=(0.02, -0.5))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseSolidExtrude(depth=10.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='variable_lambda')
mdb.models['Model-1'].materials['variable_lambda'].Elastic(table=((20000000.0, 
    20000000.0, 20000000.0, 0.3, 0.3, 0.3, 10000000.0, 25088757.3964497, 
    25088757.3964497), ), type=ENGINEERING_CONSTANTS)
mdb.models['Model-1'].HomogeneousSolidSection(material='variable_lambda', name=
    'plate_section', thickness=None)
mdb.models['Model-1'].parts['Part-1'].Set(cells=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='whole_plate')
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['whole_plate'], sectionName=
    'plate_section', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].MaterialOrientation(
    additionalRotationType=ROTATION_NONE, axis=AXIS_1, fieldName='', localCsys=
    None, orientationType=GLOBAL, region=
    mdb.models['Model-1'].parts['Part-1'].sets['whole_plate'], stackDirection=
    STACK_3)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].StaticStep(name='loading', previous='Initial')
mdb.models['Model-1'].ExpressionField(description='', expression=' Y +10', 
    localCsys=None, name='symetric_ramp')
mdb.models['Model-1'].rootAssembly.Surface(name='loading_surface', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='loading', 
    distributionType=FIELD, field='symetric_ramp', magnitude=1.0, name='Load-1'
    , region=mdb.models['Model-1'].rootAssembly.surfaces['loading_surface'])
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].ExpressionField(description='', expression='-4 *Y +1', 
    localCsys=None, name='AnalyticalField-2')
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='loading', 
    distributionType=FIELD, field='symetric_ramp', magnitude=1.0, name='Load-1'
    , region=mdb.models['Model-1'].rootAssembly.surfaces['loading_surface'])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Part-1'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Part-1'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Part-1'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.05, name='__profile__', 
    sheetSize=2.0, transform=
    mdb.models['Model-1'].parts['Part-1'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Part-1'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Part-1'].edges[2], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.02, 0.0), point2=
    (0.02, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5])
mdb.models['Model-1'].parts['Part-1'].PartitionFaceBySketch(faces=
    mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(('[#20 ]', 
    ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].parts['Part-1'].edges[2])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.Surface(name='loading_surface_upper', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='loading', 
    distributionType=FIELD, field='AnalyticalField-2', magnitude=1.0, name=
    'Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['loading_surface_upper'])
mdb.models['Model-1'].ExpressionField(description='', expression='4*Y+1', 
    localCsys=None, name='AnalyticalField-3')
mdb.models['Model-1'].rootAssembly.Surface(name='loading_surface_lower', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#40 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='loading', 
    distributionType=FIELD, field='AnalyticalField-3', magnitude=1.0, name=
    'Load-2', region=
    mdb.models['Model-1'].rootAssembly.surfaces['loading_surface_lower'])
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'SEQUT', 'PE', 'PEEQ', 'PEMAG', 'LE', 'TE', 'TEEQ', 'TEVOL', 'EEQUT', 
    'U', 'RF', 'CF', 'CSTRESS', 'CDISP', 'COORD', 'MVF'))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=1, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1'].waitForCompletion()
